import org.junit.Test

import org.junit.Assert.*

class MainKtTest {

    /**
     * Test Vector from Section 2.3.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun chacha20Block232() {
        val processed = chacha20Block(Array(32) { it * 1 }, 1, arrayOf(0, 0, 0, 9, 0, 0, 0, 0x4a, 0, 0, 0, 0))
        val expected = arrayOf(
            0x10, 0xf1, 0xe7, 0xe4, 0xd1, 0x3b, 0x59, 0x15, 0x50, 0x0f, 0xdd, 0x1f, 0xa3, 0x20, 0x71, 0xc4,
            0xc7, 0xd1, 0xf4, 0xc7, 0x33, 0xc0, 0x68, 0x03, 0x04, 0x22, 0xaa, 0x9a, 0xc3, 0xd4, 0x6c, 0x4e,
            0xd2, 0x82, 0x64, 0x46, 0x07, 0x9f, 0xaa, 0x09, 0x14, 0xc2, 0xd7, 0x05, 0xd9, 0x8b, 0x02, 0xa2,
            0xb5, 0x12, 0x9c, 0xd1, 0xde, 0x16, 0x4e, 0xb9, 0xcb, 0xd0, 0x83, 0xe8, 0xa2, 0x50, 0x3c, 0x4e,
        )
        assertEquals("Length of result", expected.size, processed.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), processed.get(i).toString(16))
        }
    }

    /**
     * Test Vector from Section 2.4.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun chacha20Block242a() {
        val processed = chacha20Block(Array(32) { it * 1 }, 1, arrayOf(0, 0, 0, 0, 0, 0, 0, 0x4a, 0, 0, 0, 0))
        val expected = arrayOf(
            0x22, 0x4f, 0x51, 0xf3, 0x40, 0x1b, 0xd9, 0xe1, 0x2f, 0xde, 0x27, 0x6f, 0xb8, 0x63, 0x1d, 0xed,
            0x8c, 0x13, 0x1f, 0x82, 0x3d, 0x2c, 0x06, 0xe2, 0x7e, 0x4f, 0xca, 0xec, 0x9e, 0xf3, 0xcf, 0x78,
            0x8a, 0x3b, 0x0a, 0xa3, 0x72, 0x60, 0x0a, 0x92, 0xb5, 0x79, 0x74, 0xcd, 0xed, 0x2b, 0x93, 0x34,
            0x79, 0x4c, 0xba, 0x40, 0xc6, 0x3e, 0x34, 0xcd, 0xea, 0x21, 0x2c, 0x4c, 0xf0, 0x7d, 0x41, 0xb7,
        )
        assertEquals("Length of result", expected.size, processed.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), processed.get(i).toString(16))
        }
    }

    /**
     * Test Vector from Section 2.4.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun chacha20Block242b() {
        val processed = chacha20Block(Array(32) { it * 1 }, 2, arrayOf(0, 0, 0, 0, 0, 0, 0, 0x4a, 0, 0, 0, 0))
        val expected = arrayOf(
            0x69, 0xa6, 0x74, 0x9f, 0x3f, 0x63, 0x0f, 0x41, 0x22, 0xca, 0xfe, 0x28, 0xec, 0x4d, 0xc4, 0x7e,
            0x26, 0xd4, 0x34, 0x6d, 0x70, 0xb9, 0x8c, 0x73, 0xf3, 0xe9, 0xc5, 0x3a, 0xc4, 0x0c, 0x59, 0x45,
            0x39, 0x8b, 0x6e, 0xda, 0x1a, 0x83, 0x2c, 0x89, 0xc1, 0x67, 0xea, 0xcd, 0x90, 0x1d, 0x7e, 0x2b,
            0xf3, 0x63, 0x74, 0x03, 0x73, 0x20, 0x1a, 0xa1, 0x88, 0xfb, 0xbc, 0xe8, 0x39, 0x91, 0xc4, 0xed,
        )
        assertEquals("Length of result", expected.size, processed.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), processed.get(i).toString(16))
        }
    }

    /**
     * Test Vector from Section 2.4.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun chacha20Encrypt242() {
        val ptBytes =
            "Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it."
                .toByteArray(Charsets.UTF_8).map { b -> b.toInt() }.toTypedArray()
        val ctBytes = chacha20Encrypt(Array(32) { it * 1 }, 1, arrayOf(0, 0, 0, 0, 0, 0, 0, 0x4a, 0, 0, 0, 0), ptBytes)
        val expected = arrayOf(
            0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81,
            0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b,
            0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57,
            0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8,
            0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e,
            0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36,
            0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42,
            0x87, 0x4d,
        )
        assertEquals("Length of result", expected.size, ctBytes.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), ctBytes.get(i).toString(16))
        }
    }

    /**
     *  Flip the Test Vector from Section 2.4.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun chacha20Decrypt242() {
        val ctBytes = arrayOf(
            0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81,
            0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b,
            0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57,
            0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8,
            0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e,
            0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36,
            0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42,
            0x87, 0x4d,
        )
        val ptBytes = chacha20Encrypt(Array(32) { it * 1 }, 1, arrayOf(0, 0, 0, 0, 0, 0, 0, 0x4a, 0, 0, 0, 0), ctBytes)
        val expected =
            "Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it."
                .toByteArray(Charsets.UTF_8).map { b -> b.toInt() }.toTypedArray()
        assertEquals("Length of result", expected.size, ptBytes.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), ptBytes.get(i).toString(16))
        }
    }

    /**
     * Test Vector from Section 2.6.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun poly1305KeyGen262() {
        val key = poly1305KeyGen(Array(32) { it + 0x80 }, arrayOf(0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7))
        val expected = arrayOf(
            0x8a, 0xd5, 0xa0, 0x8b, 0x90, 0x5f, 0x81, 0xcc, 0x81, 0x50, 0x40, 0x27, 0x4a, 0xb2, 0x94, 0x71,
            0xa8, 0x33, 0xb6, 0x37, 0xe3, 0xfd, 0x0d, 0xa5, 0x08, 0xdb, 0xb8, 0xe2, 0xfd, 0xd1, 0xa6, 0x46,
        )
        assertEquals("Length of result", expected.size, key.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), key.get(i).toString(16))
        }
    }

    /**
     * Test Vector from Section 2.5.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun poly1305MAC252() {
        val key = arrayOf(
            0x85, 0xd6, 0xbe, 0x78, 0x57, 0x55, 0x6d, 0x33, 0x7f, 0x44, 0x52, 0xfe, 0x42, 0xd5, 0x06, 0xa8,
            0x01, 0x03, 0x80, 0x8a, 0xfb, 0x0d, 0xb2, 0xfd, 0x4a, 0xbf, 0xf6, 0xaf, 0x41, 0x49, 0xf5, 0x1b
        )
        val msg = "Cryptographic Forum Research Group"
            .toByteArray(Charsets.UTF_8).map { b -> b.toInt() }.toTypedArray()
        val mac = poly1305MAC(key, msg)
        val expected = arrayOf(
            0xa8, 0x06, 0x1d, 0xc1, 0x30, 0x51, 0x36, 0xc6, 0xc2, 0x2b, 0x8b, 0xaf, 0x0c, 0x01, 0x27, 0xa9,
        )
        assertEquals("Length of result", expected.size, mac.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), mac.get(i).toString(16))
        }
    }

    /**
     * Test Vector from Section 2.8.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun chacha20AEADEncrypt282() {
        val msg =
            "Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it."
                .toByteArray(Charsets.UTF_8).map { b -> b.toInt() }.toTypedArray()
        val aad = arrayOf(0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7)

        val key = Array(32) { it + 0x80 }
        val nonce = arrayOf(
            0x07, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        )

        val (mac, tag) = chacha20AEADEncrypt(key, nonce, msg, aad)
        val expectedMAC = arrayOf(
            0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0x00, 0x00, 0x00, 0x00,
            0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb, 0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2,
            0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe, 0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6,
            0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12, 0x82, 0xfa, 0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b,
            0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29, 0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36,
            0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c, 0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58,
            0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94, 0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc,
            0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d, 0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b,
            0x61, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        )
        val expectedTAG = arrayOf(
            0x1a, 0xe1, 0x0b, 0x59, 0x4f, 0x09, 0xe2, 0x6a, 0x7e, 0x90, 0x2e, 0xcb, 0xd0, 0x60, 0x06, 0x91,
        )
        assertEquals("Length of mac", expectedMAC.size, mac.size)
        for (i in 0..expectedMAC.size - 1) {
            assertEquals("Error in byte " + i, expectedMAC.get(i).toString(16), mac.get(i).toString(16))
        }

        assertEquals("Length of tag", expectedTAG.size, tag.size)
        for (i in 0..expectedTAG.size - 1) {
            assertEquals("Error in byte " + i, expectedTAG.get(i).toString(16), tag.get(i).toString(16))
        }
    }

    /**
     * Flip of Test Vector from Section 2.8.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun chacha20AEADecrypt282() {
        val key = Array(32) { it + 0x80 }
        val nonce = arrayOf(
            0x07, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        )

        val encrypted = AEADEncrypted(
            arrayOf(
                0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0x00, 0x00, 0x00, 0x00,
                0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb, 0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2,
                0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe, 0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6,
                0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12, 0x82, 0xfa, 0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b,
                0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29, 0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36,
                0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c, 0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58,
                0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94, 0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc,
                0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d, 0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b,
                0x61, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            ), arrayOf(
                0x1a, 0xe1, 0x0b, 0x59, 0x4f, 0x09, 0xe2, 0x6a, 0x7e, 0x90, 0x2e, 0xcb, 0xd0, 0x60, 0x06, 0x91,
            )
        )

        val expectedMSG =
            "Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it."
                .toByteArray(Charsets.UTF_8).map { b -> b.toInt() }.toTypedArray()
        val expectedAAD = arrayOf(0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7)

        val (success, msg, aad) = chacha20AEADDecrypt(key, nonce, encrypted)

        assertTrue("Decryption error", success)

        assertEquals("Length of AAD", expectedAAD.size, aad.size)
        for (i in 0..expectedAAD.size - 1) {
            assertEquals("Error in AAD byte " + i, expectedAAD.get(i).toString(16), aad.get(i).toString(16))
        }

        assertEquals("Length of msg", expectedMSG.size, msg.size)
        for (i in 0..expectedMSG.size - 1) {
            assertEquals("Error in MSG byte " + i, expectedMSG.get(i).toString(16), msg.get(i).toString(16))
        }
    }

    /**
     * Test Vector #1 from A.1 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA1_1() {
        val key = Array(32) { 0 }
        val nonce = Array(12) { 0 }
        val block = chacha20Block(key, 0, nonce)
        val expected = arrayOf(
            0x76, 0xb8, 0xe0, 0xad, 0xa0, 0xf1, 0x3d, 0x90, 0x40, 0x5d, 0x6a, 0xe5, 0x53, 0x86, 0xbd, 0x28,
            0xbd, 0xd2, 0x19, 0xb8, 0xa0, 0x8d, 0xed, 0x1a, 0xa8, 0x36, 0xef, 0xcc, 0x8b, 0x77, 0x0d, 0xc7,
            0xda, 0x41, 0x59, 0x7c, 0x51, 0x57, 0x48, 0x8d, 0x77, 0x24, 0xe0, 0x3f, 0xb8, 0xd8, 0x4a, 0x37,
            0x6a, 0x43, 0xb8, 0xf4, 0x15, 0x18, 0xa1, 0x1c, 0xc3, 0x87, 0xb6, 0x69, 0xb2, 0xee, 0x65, 0x86,
        )
        assertEquals("Length of block", expected.size, block.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), block.get(i).toString(16))
        }
    }

    /**
     * Test Vector #2 from A.1 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA1_2() {
        val key = Array(32) { 0 }
        val nonce = Array(12) { 0 }
        val block = chacha20Block(key, 1, nonce)
        val expected = arrayOf(
            0x9f, 0x07, 0xe7, 0xbe, 0x55, 0x51, 0x38, 0x7a, 0x98, 0xba, 0x97, 0x7c, 0x73, 0x2d, 0x08, 0x0d,
            0xcb, 0x0f, 0x29, 0xa0, 0x48, 0xe3, 0x65, 0x69, 0x12, 0xc6, 0x53, 0x3e, 0x32, 0xee, 0x7a, 0xed,
            0x29, 0xb7, 0x21, 0x76, 0x9c, 0xe6, 0x4e, 0x43, 0xd5, 0x71, 0x33, 0xb0, 0x74, 0xd8, 0x39, 0xd5,
            0x31, 0xed, 0x1f, 0x28, 0x51, 0x0a, 0xfb, 0x45, 0xac, 0xe1, 0x0a, 0x1f, 0x4b, 0x79, 0x4d, 0x6f,
        )
        assertEquals("Length of block", expected.size, block.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), block.get(i).toString(16))
        }
    }

    /**
     * Test Vector #3 from A.1 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA1_3() {
        val key = Array(32) { 0 }
        key.set(31, 1)
        val nonce = Array(12) { 0 }
        val block = chacha20Block(key, 1, nonce)
        val expected = arrayOf(
            0x3a, 0xeb, 0x52, 0x24, 0xec, 0xf8, 0x49, 0x92, 0x9b, 0x9d, 0x82, 0x8d, 0xb1, 0xce, 0xd4, 0xdd,
            0x83, 0x20, 0x25, 0xe8, 0x01, 0x8b, 0x81, 0x60, 0xb8, 0x22, 0x84, 0xf3, 0xc9, 0x49, 0xaa, 0x5a,
            0x8e, 0xca, 0x00, 0xbb, 0xb4, 0xa7, 0x3b, 0xda, 0xd1, 0x92, 0xb5, 0xc4, 0x2f, 0x73, 0xf2, 0xfd,
            0x4e, 0x27, 0x36, 0x44, 0xc8, 0xb3, 0x61, 0x25, 0xa6, 0x4a, 0xdd, 0xeb, 0x00, 0x6c, 0x13, 0xa0,
        )
        assertEquals("Length of block", expected.size, block.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), block.get(i).toString(16))
        }
    }

    /**
     * Test Vector #4 from A.1 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA1_4() {
        val key = Array(32) { 0 }
        key.set(1, 0xff)
        val nonce = Array(12) { 0 }
        val block = chacha20Block(key, 2, nonce)
        val expected = arrayOf(
            0x72, 0xd5, 0x4d, 0xfb, 0xf1, 0x2e, 0xc4, 0x4b, 0x36, 0x26, 0x92, 0xdf, 0x94, 0x13, 0x7f, 0x32,
            0x8f, 0xea, 0x8d, 0xa7, 0x39, 0x90, 0x26, 0x5e, 0xc1, 0xbb, 0xbe, 0xa1, 0xae, 0x9a, 0xf0, 0xca,
            0x13, 0xb2, 0x5a, 0xa2, 0x6c, 0xb4, 0xa6, 0x48, 0xcb, 0x9b, 0x9d, 0x1b, 0xe6, 0x5b, 0x2c, 0x09,
            0x24, 0xa6, 0x6c, 0x54, 0xd5, 0x45, 0xec, 0x1b, 0x73, 0x74, 0xf4, 0x87, 0x2e, 0x99, 0xf0, 0x96,
        )
        assertEquals("Length of block", expected.size, block.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), block.get(i).toString(16))
        }
    }

    /**
     * Test Vector #5 from A.1 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA1_5() {
        val key = Array(32) { 0 }
        val nonce = Array(12) { 0 }
        nonce.set(11, 2)
        val block = chacha20Block(key, 0, nonce)
        val expected = arrayOf(
            0xc2, 0xc6, 0x4d, 0x37, 0x8c, 0xd5, 0x36, 0x37, 0x4a, 0xe2, 0x04, 0xb9, 0xef, 0x93, 0x3f, 0xcd,
            0x1a, 0x8b, 0x22, 0x88, 0xb3, 0xdf, 0xa4, 0x96, 0x72, 0xab, 0x76, 0x5b, 0x54, 0xee, 0x27, 0xc7,
            0x8a, 0x97, 0x0e, 0x0e, 0x95, 0x5c, 0x14, 0xf3, 0xa8, 0x8e, 0x74, 0x1b, 0x97, 0xc2, 0x86, 0xf7,
            0x5f, 0x8f, 0xc2, 0x99, 0xe8, 0x14, 0x83, 0x62, 0xfa, 0x19, 0x8a, 0x39, 0x53, 0x1b, 0xed, 0x6d,
        )
        assertEquals("Length of block", expected.size, block.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), block.get(i).toString(16))
        }
    }

    /**
     * Test Vector #1 from A.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA2_1() {
        val key = Array(32) { 0 }
        val nonce = Array(12) { 0 }
        val plaintext = Array(64) { 0 }
        val cyphertext = chacha20Encrypt(key, 0, nonce, plaintext)
        val expected = arrayOf(
            0x76, 0xb8, 0xe0, 0xad, 0xa0, 0xf1, 0x3d, 0x90, 0x40, 0x5d, 0x6a, 0xe5, 0x53, 0x86, 0xbd, 0x28,
            0xbd, 0xd2, 0x19, 0xb8, 0xa0, 0x8d, 0xed, 0x1a, 0xa8, 0x36, 0xef, 0xcc, 0x8b, 0x77, 0x0d, 0xc7,
            0xda, 0x41, 0x59, 0x7c, 0x51, 0x57, 0x48, 0x8d, 0x77, 0x24, 0xe0, 0x3f, 0xb8, 0xd8, 0x4a, 0x37,
            0x6a, 0x43, 0xb8, 0xf4, 0x15, 0x18, 0xa1, 0x1c, 0xc3, 0x87, 0xb6, 0x69, 0xb2, 0xee, 0x65, 0x86,
        )
        assertEquals("Length of cyphertext", expected.size, cyphertext.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), cyphertext.get(i).toString(16))
        }
    }

    /**
     * Test Vector #2 from A.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA2_2() {
        val key = Array(32) { 0 }
        key.set(31, 1)
        val nonce = Array(12) { 0 }
        nonce.set(11, 2)
        val plaintext = ("Any submission to the IETF intended by the Contributor for publi" +
                "cation as all or part of an IETF Internet-Draft or RFC and any statement made wi" +
                "thin the context of an IETF activity is considered an \"IETF Cont" +
                "ribution\". Such statements include oral statements in IETF sessi" +
                "ons, as well as written and electronic communications made at an" +
                "y time or place, which are addressed to")
            .toByteArray(Charsets.UTF_8).map { b -> b.toInt() }.toTypedArray()
        val cyphertext = chacha20Encrypt(key, 1, nonce, plaintext)
        val expected = arrayOf(
            0xa3, 0xfb, 0xf0, 0x7d, 0xf3, 0xfa, 0x2f, 0xde, 0x4f, 0x37, 0x6c, 0xa2, 0x3e, 0x82, 0x73, 0x70,
            0x41, 0x60, 0x5d, 0x9f, 0x4f, 0x4f, 0x57, 0xbd, 0x8c, 0xff, 0x2c, 0x1d, 0x4b, 0x79, 0x55, 0xec,
            0x2a, 0x97, 0x94, 0x8b, 0xd3, 0x72, 0x29, 0x15, 0xc8, 0xf3, 0xd3, 0x37, 0xf7, 0xd3, 0x70, 0x05,
            0x0e, 0x9e, 0x96, 0xd6, 0x47, 0xb7, 0xc3, 0x9f, 0x56, 0xe0, 0x31, 0xca, 0x5e, 0xb6, 0x25, 0x0d,
            0x40, 0x42, 0xe0, 0x27, 0x85, 0xec, 0xec, 0xfa, 0x4b, 0x4b, 0xb5, 0xe8, 0xea, 0xd0, 0x44, 0x0e,
            0x20, 0xb6, 0xe8, 0xdb, 0x09, 0xd8, 0x81, 0xa7, 0xc6, 0x13, 0x2f, 0x42, 0x0e, 0x52, 0x79, 0x50,
            0x42, 0xbd, 0xfa, 0x77, 0x73, 0xd8, 0xa9, 0x05, 0x14, 0x47, 0xb3, 0x29, 0x1c, 0xe1, 0x41, 0x1c,
            0x68, 0x04, 0x65, 0x55, 0x2a, 0xa6, 0xc4, 0x05, 0xb7, 0x76, 0x4d, 0x5e, 0x87, 0xbe, 0xa8, 0x5a,
            0xd0, 0x0f, 0x84, 0x49, 0xed, 0x8f, 0x72, 0xd0, 0xd6, 0x62, 0xab, 0x05, 0x26, 0x91, 0xca, 0x66,
            0x42, 0x4b, 0xc8, 0x6d, 0x2d, 0xf8, 0x0e, 0xa4, 0x1f, 0x43, 0xab, 0xf9, 0x37, 0xd3, 0x25, 0x9d,
            0xc4, 0xb2, 0xd0, 0xdf, 0xb4, 0x8a, 0x6c, 0x91, 0x39, 0xdd, 0xd7, 0xf7, 0x69, 0x66, 0xe9, 0x28,
            0xe6, 0x35, 0x55, 0x3b, 0xa7, 0x6c, 0x5c, 0x87, 0x9d, 0x7b, 0x35, 0xd4, 0x9e, 0xb2, 0xe6, 0x2b,
            0x08, 0x71, 0xcd, 0xac, 0x63, 0x89, 0x39, 0xe2, 0x5e, 0x8a, 0x1e, 0x0e, 0xf9, 0xd5, 0x28, 0x0f,
            0xa8, 0xca, 0x32, 0x8b, 0x35, 0x1c, 0x3c, 0x76, 0x59, 0x89, 0xcb, 0xcf, 0x3d, 0xaa, 0x8b, 0x6c,
            0xcc, 0x3a, 0xaf, 0x9f, 0x39, 0x79, 0xc9, 0x2b, 0x37, 0x20, 0xfc, 0x88, 0xdc, 0x95, 0xed, 0x84,
            0xa1, 0xbe, 0x05, 0x9c, 0x64, 0x99, 0xb9, 0xfd, 0xa2, 0x36, 0xe7, 0xe8, 0x18, 0xb0, 0x4b, 0x0b,
            0xc3, 0x9c, 0x1e, 0x87, 0x6b, 0x19, 0x3b, 0xfe, 0x55, 0x69, 0x75, 0x3f, 0x88, 0x12, 0x8c, 0xc0,
            0x8a, 0xaa, 0x9b, 0x63, 0xd1, 0xa1, 0x6f, 0x80, 0xef, 0x25, 0x54, 0xd7, 0x18, 0x9c, 0x41, 0x1f,
            0x58, 0x69, 0xca, 0x52, 0xc5, 0xb8, 0x3f, 0xa3, 0x6f, 0xf2, 0x16, 0xb9, 0xc1, 0xd3, 0x00, 0x62,
            0xbe, 0xbc, 0xfd, 0x2d, 0xc5, 0xbc, 0xe0, 0x91, 0x19, 0x34, 0xfd, 0xa7, 0x9a, 0x86, 0xf6, 0xe6,
            0x98, 0xce, 0xd7, 0x59, 0xc3, 0xff, 0x9b, 0x64, 0x77, 0x33, 0x8f, 0x3d, 0xa4, 0xf9, 0xcd, 0x85,
            0x14, 0xea, 0x99, 0x82, 0xcc, 0xaf, 0xb3, 0x41, 0xb2, 0x38, 0x4d, 0xd9, 0x02, 0xf3, 0xd1, 0xab,
            0x7a, 0xc6, 0x1d, 0xd2, 0x9c, 0x6f, 0x21, 0xba, 0x5b, 0x86, 0x2f, 0x37, 0x30, 0xe3, 0x7c, 0xfd,
            0xc4, 0xfd, 0x80, 0x6c, 0x22, 0xf2, 0x21,
        )
        assertEquals("Length of cyphertext", expected.size, cyphertext.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), cyphertext.get(i).toString(16))
        }
    }

    /**
     * Test Vector #3 from A.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA2_3() {
        val key = arrayOf(
            0x1c, 0x92, 0x40, 0xa5, 0xeb, 0x55, 0xd3, 0x8a, 0xf3, 0x33, 0x88, 0x86, 0x04, 0xf6, 0xb5, 0xf0,
            0x47, 0x39, 0x17, 0xc1, 0x40, 0x2b, 0x80, 0x09, 0x9d, 0xca, 0x5c, 0xbc, 0x20, 0x70, 0x75, 0xc0,
        )
        val nonce = Array(12) { 0 }
        nonce.set(11, 2)
        val plaintext = arrayOf(
            0x27, 0x54, 0x77, 0x61, 0x73, 0x20, 0x62, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x67, 0x2c, 0x20, 0x61,
            0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6c, 0x69, 0x74, 0x68, 0x79, 0x20, 0x74, 0x6f,
            0x76, 0x65, 0x73, 0x0a, 0x44, 0x69, 0x64, 0x20, 0x67, 0x79, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64,
            0x20, 0x67, 0x69, 0x6d, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77,
            0x61, 0x62, 0x65, 0x3a, 0x0a, 0x41, 0x6c, 0x6c, 0x20, 0x6d, 0x69, 0x6d, 0x73, 0x79, 0x20, 0x77,
            0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6f, 0x72, 0x6f, 0x67, 0x6f, 0x76, 0x65,
            0x73, 0x2c, 0x0a, 0x41, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x6d, 0x65, 0x20,
            0x72, 0x61, 0x74, 0x68, 0x73, 0x20, 0x6f, 0x75, 0x74, 0x67, 0x72, 0x61, 0x62, 0x65, 0x2e,
        )
        val cyphertext = chacha20Encrypt(key, 42, nonce, plaintext)
        val expected = arrayOf(
            0x62, 0xe6, 0x34, 0x7f, 0x95, 0xed, 0x87, 0xa4, 0x5f, 0xfa, 0xe7, 0x42, 0x6f, 0x27, 0xa1, 0xdf,
            0x5f, 0xb6, 0x91, 0x10, 0x04, 0x4c, 0x0d, 0x73, 0x11, 0x8e, 0xff, 0xa9, 0x5b, 0x01, 0xe5, 0xcf,
            0x16, 0x6d, 0x3d, 0xf2, 0xd7, 0x21, 0xca, 0xf9, 0xb2, 0x1e, 0x5f, 0xb1, 0x4c, 0x61, 0x68, 0x71,
            0xfd, 0x84, 0xc5, 0x4f, 0x9d, 0x65, 0xb2, 0x83, 0x19, 0x6c, 0x7f, 0xe4, 0xf6, 0x05, 0x53, 0xeb,
            0xf3, 0x9c, 0x64, 0x02, 0xc4, 0x22, 0x34, 0xe3, 0x2a, 0x35, 0x6b, 0x3e, 0x76, 0x43, 0x12, 0xa6,
            0x1a, 0x55, 0x32, 0x05, 0x57, 0x16, 0xea, 0xd6, 0x96, 0x25, 0x68, 0xf8, 0x7d, 0x3f, 0x3f, 0x77,
            0x04, 0xc6, 0xa8, 0xd1, 0xbc, 0xd1, 0xbf, 0x4d, 0x50, 0xd6, 0x15, 0x4b, 0x6d, 0xa7, 0x31, 0xb1,
            0x87, 0xb5, 0x8d, 0xfd, 0x72, 0x8a, 0xfa, 0x36, 0x75, 0x7a, 0x79, 0x7a, 0xc1, 0x88, 0xd1,
        )
        assertEquals("Length of cyphertext", expected.size, cyphertext.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), cyphertext.get(i).toString(16))
        }
    }

    /**
     * Test Vector #1 from A.3 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA3_1() {
        val key = Array(32) { 0 }
        val msg = Array(64) { 0 }

        val tag = poly1305MAC(key, msg)
        val expected = Array(16) { 0 }
        assertEquals("Length of tag", expected.size, tag.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), tag.get(i).toString(16))
        }
    }

    /**
     * Test Vector #2 from A.3 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     *
     *        Notice how r is equal to zero.  The part of the
     *        Poly1305 algorithm where the accumulator is multiplied by r means
     *        that with r equal zero, the tag will be equal to s regardless of the
     *        content of the text.  Fortunately, all the proposed methods of
     *        generating r are such that getting this particular weak key is very
     *        unlikely.
     */
    @Test
    fun testVectorA3_2() {
        val key = arrayOf(
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x36, 0xe5, 0xf6, 0xb5, 0xc5, 0xe0, 0x60, 0x70, 0xf0, 0xef, 0xca, 0x96, 0x22, 0x7a, 0x86, 0x3e,
        )
        val msg = arrayOf(
            0x41, 0x6e, 0x79, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74,
            0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x45, 0x54, 0x46, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e,
            0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72,
            0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69,
            0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x72,
            0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x45, 0x54, 0x46,
            0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2d, 0x44, 0x72, 0x61, 0x66, 0x74, 0x20,
            0x6f, 0x72, 0x20, 0x52, 0x46, 0x43, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x73,
            0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x77, 0x69,
            0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
            0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x45, 0x54, 0x46, 0x20, 0x61, 0x63, 0x74, 0x69,
            0x76, 0x69, 0x74, 0x79, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
            0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x22, 0x49, 0x45, 0x54, 0x46, 0x20, 0x43, 0x6f, 0x6e, 0x74,
            0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x20, 0x53, 0x75, 0x63, 0x68, 0x20,
            0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
            0x64, 0x65, 0x20, 0x6f, 0x72, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
            0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x49, 0x45, 0x54, 0x46, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69,
            0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20,
            0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6c, 0x65, 0x63,
            0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
            0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x61, 0x74, 0x20, 0x61, 0x6e,
            0x79, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2c,
            0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
            0x73, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
        )

        val tag = poly1305MAC(key, msg)
        val expected = arrayOf(
            0x36, 0xe5, 0xf6, 0xb5, 0xc5, 0xe0, 0x60, 0x70, 0xf0, 0xef, 0xca, 0x96, 0x22, 0x7a, 0x86, 0x3e,
        )
        assertEquals("Length of tag", expected.size, tag.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), tag.get(i).toString(16))
        }
    }

    /**
     * Test Vector #3 from A.3 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA3_3() {
        val key = arrayOf(
            0x36, 0xe5, 0xf6, 0xb5, 0xc5, 0xe0, 0x60, 0x70, 0xf0, 0xef, 0xca, 0x96, 0x22, 0x7a, 0x86, 0x3e,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        )
        val msg = arrayOf(
            0x41, 0x6e, 0x79, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74,
            0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x45, 0x54, 0x46, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e,
            0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72,
            0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69,
            0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x72,
            0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x45, 0x54, 0x46,
            0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2d, 0x44, 0x72, 0x61, 0x66, 0x74, 0x20,
            0x6f, 0x72, 0x20, 0x52, 0x46, 0x43, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x73,
            0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x77, 0x69,
            0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
            0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x45, 0x54, 0x46, 0x20, 0x61, 0x63, 0x74, 0x69,
            0x76, 0x69, 0x74, 0x79, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
            0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x22, 0x49, 0x45, 0x54, 0x46, 0x20, 0x43, 0x6f, 0x6e, 0x74,
            0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x20, 0x53, 0x75, 0x63, 0x68, 0x20,
            0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
            0x64, 0x65, 0x20, 0x6f, 0x72, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
            0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x49, 0x45, 0x54, 0x46, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69,
            0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20,
            0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6c, 0x65, 0x63,
            0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
            0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x61, 0x74, 0x20, 0x61, 0x6e,
            0x79, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2c,
            0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
            0x73, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
        )

        val tag = poly1305MAC(key, msg)
        val expected = arrayOf(
            0xf3, 0x47, 0x7e, 0x7c, 0xd9, 0x54, 0x17, 0xaf, 0x89, 0xa6, 0xb8, 0x79, 0x4c, 0x31, 0x0c, 0xf0,
        )
        assertEquals("Length of tag", expected.size, tag.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), tag.get(i).toString(16))
        }
    }

    /**
     * Test Vector #4 from A.3 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA3_4() {
        val key = arrayOf(
            0x1c, 0x92, 0x40, 0xa5, 0xeb, 0x55, 0xd3, 0x8a, 0xf3, 0x33, 0x88, 0x86, 0x04, 0xf6, 0xb5, 0xf0,
            0x47, 0x39, 0x17, 0xc1, 0x40, 0x2b, 0x80, 0x09, 0x9d, 0xca, 0x5c, 0xbc, 0x20, 0x70, 0x75, 0xc0,
        )
        val msg = arrayOf(
            0x27, 0x54, 0x77, 0x61, 0x73, 0x20, 0x62, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x67, 0x2c, 0x20, 0x61,
            0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6c, 0x69, 0x74, 0x68, 0x79, 0x20, 0x74, 0x6f,
            0x76, 0x65, 0x73, 0x0a, 0x44, 0x69, 0x64, 0x20, 0x67, 0x79, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64,
            0x20, 0x67, 0x69, 0x6d, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77,
            0x61, 0x62, 0x65, 0x3a, 0x0a, 0x41, 0x6c, 0x6c, 0x20, 0x6d, 0x69, 0x6d, 0x73, 0x79, 0x20, 0x77,
            0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6f, 0x72, 0x6f, 0x67, 0x6f, 0x76, 0x65,
            0x73, 0x2c, 0x0a, 0x41, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x6d, 0x65, 0x20,
            0x72, 0x61, 0x74, 0x68, 0x73, 0x20, 0x6f, 0x75, 0x74, 0x67, 0x72, 0x61, 0x62, 0x65, 0x2e,
        )

        val tag = poly1305MAC(key, msg)
        val expected = arrayOf(
            0x45, 0x41, 0x66, 0x9a, 0x7e, 0xaa, 0xee, 0x61, 0xe7, 0x08, 0xdc, 0x7c, 0xbc, 0xc5, 0xeb, 0x62,
        )
        assertEquals("Length of tag", expected.size, tag.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), tag.get(i).toString(16))
        }
    }

    /**
     * Test Vector #5 from A.3 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     *
     *  If one uses 130-bit partial reduction, does the code handle the case where partially
     *  reduced final result is not fully reduced?
     */
    @Test
    fun testVectorA3_5() {
        val key = Array(32) { 0 }
        key.set(0, 2)
        val msg = Array(16) { 0xff }

        val tag = poly1305MAC(key, msg)
        val expected = Array(16) { 0 }
        expected.set(0, 3)
        assertEquals("Length of tag", expected.size, tag.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), tag.get(i).toString(16))
        }
    }

    /**
     * Test Vector #6 from A.3 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     *
     * What happens if addition of s overflows modulo 2^128?
     */
    @Test
    fun testVectorA3_6() {
        val key = arrayOf(
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        )
        val msg = Array(16) { 0x00 }
        msg.set(0, 2)

        val tag = poly1305MAC(key, msg)
        val expected = Array(16) { 0 }
        expected.set(0, 3)
        assertEquals("Length of tag", expected.size, tag.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), tag.get(i).toString(16))
        }
    }

    /**
     * Test Vector #7 from A.3 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     *
     * What happens if data limb is all ones and there is carry from lower limb?
     */
    @Test
    fun testVectorA3_7() {
        val key = Array(32) { 0 }
        key.set(0, 1)
        val msg = arrayOf(
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        )

        val tag = poly1305MAC(key, msg)
        val expected = Array(16) { 0 }
        expected.set(0, 5)
        assertEquals("Length of tag", expected.size, tag.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), tag.get(i).toString(16))
        }
    }

    /**
     * Test Vector #8 from A.3 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     *
     * What happens if final result from polynomial part is exactly 2^130-5?
     */
    @Test
    fun testVectorA3_8() {
        val key = Array(32) { 0 }
        key.set(0, 1)
        val msg = arrayOf(
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xfb, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        )

        val tag = poly1305MAC(key, msg)
        val expected = Array(16) { 0 }
        assertEquals("Length of tag", expected.size, tag.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), tag.get(i).toString(16))
        }
    }

    /**
     * Test Vector #9 from A.3 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     *
     * What happens if final result from polynomial part is exactly 2^130-6?
     */
    @Test
    fun testVectorA3_9() {
        val key = Array(32) { 0 }
        key.set(0, 2)
        val msg = Array(16) { 0xff }
        msg.set(0, 0xfd)

        val tag = poly1305MAC(key, msg)
        val expected = Array(16) { 0xff }
        expected.set(0, 0xfa)
        assertEquals("Length of tag", expected.size, tag.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), tag.get(i).toString(16))
        }
    }

    /**
     * Test Vector #10 from A.3 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     *
     * What happens if 5*H+L-type reduction produces 131-bit intermediate result?
     */
    @Test
    fun testVectorA3_10() {
        val key = Array(32) { 0 }
        key.set(0, 1)
        key.set(8, 4)
        val msg = arrayOf(
            0xe3, 0x35, 0x94, 0xd7, 0x50, 0x5e, 0x43, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x33, 0x94, 0xd7, 0x50, 0x5e, 0x43, 0x79, 0xcd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        )

        val tag = poly1305MAC(key, msg)
        val expected = Array(16) { 0 }
        expected.set(0, 0x14)
        expected.set(8, 0x55)
        assertEquals("Length of tag", expected.size, tag.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), tag.get(i).toString(16))
        }
    }

    /**
     * Test Vector #11 from A.3 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     *
     * What happens if 5*H+L-type reduction produces 131-bit final result?
     */
    @Test
    fun testVectorA3_11() {
        val key = Array(32) { 0 }
        key.set(0, 1)
        key.set(8, 4)
        val msg = arrayOf(
            0xe3, 0x35, 0x94, 0xd7, 0x50, 0x5e, 0x43, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x33, 0x94, 0xd7, 0x50, 0x5e, 0x43, 0x79, 0xcd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        )

        val tag = poly1305MAC(key, msg)
        val expected = Array(16) { 0 }
        expected.set(0, 0x13)
        assertEquals("Length of tag", expected.size, tag.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), tag.get(i).toString(16))
        }
    }

    /**
     * Test Vector #3 from A.2 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA4_1() {
        // Test Vector #1 from A.4 in https://datatracker.ietf.org/doc/rfc7539/?include_text=1
        val key = Array(32) { 0 }
        val nonce = Array(12) { 0 }

        val onetimekey = poly1305KeyGen(key, nonce)
        val expected = arrayOf(
            0x76, 0xb8, 0xe0, 0xad, 0xa0, 0xf1, 0x3d, 0x90, 0x40, 0x5d, 0x6a, 0xe5, 0x53, 0x86, 0xbd, 0x28,
            0xbd, 0xd2, 0x19, 0xb8, 0xa0, 0x8d, 0xed, 0x1a, 0xa8, 0x36, 0xef, 0xcc, 0x8b, 0x77, 0x0d, 0xc7,
        )
        assertEquals("Length of one time key", expected.size, onetimekey.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), onetimekey.get(i).toString(16))
        }
    }

    /**
     * Test Vector #2 from A.4 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA4_2() {
        val key = Array(32) { 0 }
        key.set(31, 1)
        val nonce = Array(12) { 0 }
        nonce.set(11, 2)

        val onetimekey = poly1305KeyGen(key, nonce)
        val expected = arrayOf(
            0xec, 0xfa, 0x25, 0x4f, 0x84, 0x5f, 0x64, 0x74, 0x73, 0xd3, 0xcb, 0x14, 0x0d, 0xa9, 0xe8, 0x76,
            0x06, 0xcb, 0x33, 0x06, 0x6c, 0x44, 0x7b, 0x87, 0xbc, 0x26, 0x66, 0xdd, 0xe3, 0xfb, 0xb7, 0x39,
        )
        assertEquals("Length of one time key", expected.size, onetimekey.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), onetimekey.get(i).toString(16))
        }
    }

    /**
     * Test Vector #3 from A.4 in [RFC 7539](https://datatracker.ietf.org/doc/rfc7539/?include_text=1)
     */
    @Test
    fun testVectorA4_3() {
        val key = arrayOf(
            0x1c, 0x92, 0x40, 0xa5, 0xeb, 0x55, 0xd3, 0x8a, 0xf3, 0x33, 0x88, 0x86, 0x04, 0xf6, 0xb5, 0xf0,
            0x47, 0x39, 0x17, 0xc1, 0x40, 0x2b, 0x80, 0x09, 0x9d, 0xca, 0x5c, 0xbc, 0x20, 0x70, 0x75, 0xc0,
        )
        val nonce = Array(12) { 0 }
        nonce.set(11, 2)

        val onetimekey = poly1305KeyGen(key, nonce)
        val expected = arrayOf(
            0x96, 0x5e, 0x3b, 0xc6, 0xf9, 0xec, 0x7e, 0xd9, 0x56, 0x08, 0x08, 0xf4, 0xd2, 0x29, 0xf9, 0x4b,
            0x13, 0x7f, 0xf2, 0x75, 0xca, 0x9b, 0x3f, 0xcb, 0xdd, 0x59, 0xde, 0xaa, 0xd2, 0x33, 0x10, 0xae,
        )
        assertEquals("Length of one time key", expected.size, onetimekey.size)
        for (i in 0..expected.size - 1) {
            assertEquals("Error in byte " + i, expected.get(i).toString(16), onetimekey.get(i).toString(16))
        }
    }
}