import org.junit.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertTrue
import kotlin.test.fail

class EnvelopeKtTest {
    @Test
    fun envelopeWrap() {
        val messageTime = "2021-02-12T01:54:30.832413Z"
        val expectedEnv = "------------------------------------------------------------------------\n" +
                " Envelope Tool 1.0.0\n" +
                " Time: 2021-02-12T01:54:30.832413Z\n" +
                "\n" +
                " lhZPByJXAs2m/IyxMC3qE4j2HY7MPSOPUHEeQ/kz+vfO8hmVE9rMGr77UgRvRPcrfzY/\n" +
                " knUXeChY52oyLLphuH3zflDN3OkGl3xciQYEgDC5G5ugv+R0BHGa58m4E7d9QcHCtAp/\n" +
                " h2uzrRf0l5MxNZrJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHIAAAAAAAAAHCeKUP08kL07\n" +
                " budJsIISqA==\n" +
                "------------------------------------------------------------------------\n"

        val encContent = AEADEncrypted(arrayOf(
            0x96, 0x16, 0x4f, 0x07, 0x22, 0x57, 0x02, 0xcd, 0xa6, 0xfc, 0x8c, 0xb1, 0x30, 0x2d, 0xea, 0x13,
            0x88, 0xf6, 0x1d, 0x8e, 0xcc, 0x3d, 0x23, 0x8f, 0x50, 0x71, 0x1e, 0x43, 0xf9, 0x33, 0xfa, 0xf7,
            0xce, 0xf2, 0x19, 0x95, 0x13, 0xda, 0xcc, 0x1a, 0xbe, 0xfb, 0x52, 0x04, 0x6f, 0x44, 0xf7, 0x2b,
            0x7f, 0x36, 0x3f, 0x92, 0x75, 0x17, 0x78, 0x28, 0x58, 0xe7, 0x6a, 0x32, 0x2c, 0xba, 0x61, 0xb8,
            0x7d, 0xf3, 0x7e, 0x50, 0xcd, 0xdc, 0xe9, 0x06, 0x97, 0x7c, 0x5c, 0x89, 0x06, 0x04, 0x80, 0x30,
            0xb9, 0x1b, 0x9b, 0xa0, 0xbf, 0xe4, 0x74, 0x04, 0x71, 0x9a, 0xe7, 0xc9, 0xb8, 0x13, 0xb7, 0x7d,
            0x41, 0xc1, 0xc2, 0xb4, 0x0a, 0x7f, 0x87, 0x6b, 0xb3, 0xad, 0x17, 0xf4, 0x97, 0x93, 0x31, 0x35,
            0x9a, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ), arrayOf(
            0x1c, 0x27, 0x8a, 0x50, 0xfd, 0x3c, 0x90, 0xbd, 0x3b, 0x6e, 0xe7, 0x49, 0xb0, 0x82, 0x12, 0xa8,
        ))
        val envelope = closeEnvelope(encContent, messageTime)

        assertEquals(expectedEnv, envelope, "envelope")
    }

    @Test
    fun envelopeUnwrap() {
        val envelope = "------------------------------------------------------------------------\n" +
                " Envelope Tool 1.0.0\n" +
                " Time: 2021-02-12T01:54:30.832413Z\n" +
                "\n" +
                " lhZPByJXAs2m/IyxMC3qE4j2HY7MPSOPUHEeQ/kz+vfO8hmVE9rMGr77UgRvRPcrfzY/\n" +
                " knUXeChY52oyLLphuH3zflDN3OkGl3xciQYEgDC5G5ugv+R0BHGa58m4E7d9QcHCtAp/\n" +
                " h2uzrRf0l5MxNZrJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHIAAAAAAAAAHCeKUP08kL07\n" +
                " budJsIISqA==\n" +
                "------------------------------------------------------------------------\n"
        val expectedVersion = "1.0.0"
        val expectedTime = "2021-02-12T01:54:30.832413Z"
        val expectedCT = arrayOf(
            0x96, 0x16, 0x4f, 0x07, 0x22, 0x57, 0x02, 0xcd, 0xa6, 0xfc, 0x8c, 0xb1, 0x30, 0x2d, 0xea, 0x13,
            0x88, 0xf6, 0x1d, 0x8e, 0xcc, 0x3d, 0x23, 0x8f, 0x50, 0x71, 0x1e, 0x43, 0xf9, 0x33, 0xfa, 0xf7,
            0xce, 0xf2, 0x19, 0x95, 0x13, 0xda, 0xcc, 0x1a, 0xbe, 0xfb, 0x52, 0x04, 0x6f, 0x44, 0xf7, 0x2b,
            0x7f, 0x36, 0x3f, 0x92, 0x75, 0x17, 0x78, 0x28, 0x58, 0xe7, 0x6a, 0x32, 0x2c, 0xba, 0x61, 0xb8,
            0x7d, 0xf3, 0x7e, 0x50, 0xcd, 0xdc, 0xe9, 0x06, 0x97, 0x7c, 0x5c, 0x89, 0x06, 0x04, 0x80, 0x30,
            0xb9, 0x1b, 0x9b, 0xa0, 0xbf, 0xe4, 0x74, 0x04, 0x71, 0x9a, 0xe7, 0xc9, 0xb8, 0x13, 0xb7, 0x7d,
            0x41, 0xc1, 0xc2, 0xb4, 0x0a, 0x7f, 0x87, 0x6b, 0xb3, 0xad, 0x17, 0xf4, 0x97, 0x93, 0x31, 0x35,
            0x9a, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        )
        val expectedTag = arrayOf(
            0x1c, 0x27, 0x8a, 0x50, 0xfd, 0x3c, 0x90, 0xbd, 0x3b, 0x6e, 0xe7, 0x49, 0xb0, 0x82, 0x12, 0xa8,
        )

        val (envSuccess, version, time, aead) = openEnvelope(envelope)
        assertTrue(envSuccess, "Envelope not unpacked")
        assertEquals(expectedVersion, version, "envelope Version")
        assertEquals(expectedTime, time, "Message Time")
        assertNotNull(aead, "AEAD message null")

        assertEquals(expectedCT.size, aead.cyphertext.size, "Length of result")
        for (i in 0..expectedCT.size - 1) {
            assertEquals(expectedCT.get(i).toString(16), aead.cyphertext.get(i).toString(16), "Error in cyphertext byte " + i)
        }

        assertEquals(expectedTag.size, aead.tag.size, "Length of result")
        for (i in 0..expectedTag.size - 1) {
            assertEquals(expectedTag.get(i).toString(16), aead.tag.get(i).toString(16), "Error in mac tag byte " + i)
        }
    }
}